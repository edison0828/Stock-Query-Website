generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model dividends {
  dividend_id      BigInt    @id @default(autoincrement())
  stock_id         BigInt
  ex_dividend_date DateTime  @db.Date
  payment_date     DateTime? @db.Date
  amount_per_share Decimal   @db.Decimal(10, 4)
  stocks           stocks    @relation(fields: [stock_id], references: [stock_id], onDelete: Cascade, map: "fk_Dividends_Stocks1")

  @@index([stock_id], map: "fk_Dividends_Stocks1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model exchanges {
  exchange_id  Int      @id
  name         String   @unique(map: "name") @db.VarChar(255)
  abbreviation String   @unique(map: "abbreviation") @db.VarChar(50)
  country      String?  @db.VarChar(100)
  timezone     String?  @db.VarChar(100)
  stocks       stocks[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model financialreports {
  report_id          BigInt    @id @default(autoincrement())
  stock_id           BigInt
  report_date        DateTime  @db.Date
  period_type        String    @db.VarChar(20)
  filing_date        DateTime? @db.Date
  currency           String    @db.VarChar(10)
  revenue            Decimal?  @db.Decimal(20, 2)
  net_income         Decimal?  @db.Decimal(20, 2)
  eps                Decimal?  @db.Decimal(10, 4)
  total_assets       Decimal?  @db.Decimal(20, 2)
  total_liabilities  Decimal?  @db.Decimal(20, 2)
  shareholder_equity Decimal?  @db.Decimal(20, 2)
  stocks             stocks    @relation(fields: [stock_id], references: [stock_id], onDelete: Cascade, map: "fk_FinancialReports_Stocks1")

  @@unique([stock_id, report_date, period_type], map: "uq_stock_report_period")
  @@index([stock_id], map: "fk_FinancialReports_Stocks1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model historicalprices {
  stock_id             String   @db.VarChar(20)
  date                 DateTime @db.Date
  open_price           Decimal? @db.Decimal(18, 6)
  high_price           Decimal? @db.Decimal(18, 6)
  low_price            Decimal? @db.Decimal(18, 6)
  close_price          Decimal? @db.Decimal(18, 6)
  adjusted_close_price Decimal? @db.Decimal(18, 6)
  volume               BigInt?
  stocks               stocks   @relation(fields: [stock_id], references: [ticker_symbol], onDelete: NoAction, onUpdate: NoAction, map: "historicalprices_ibfk_1")

  @@id([stock_id, date])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model portfolios {
  portfolio_id   BigInt         @id @default(autoincrement())
  user_id        BigInt
  portfolio_name String         @db.VarChar(100)
  description    String?        @db.Text
  created_at     DateTime       @default(now()) @db.Timestamp(0)
  users          users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_Portfolios_Users1")
  transactions   transactions[]

  @@unique([user_id, portfolio_name], map: "uq_user_portfolio_name")
  @@index([user_id], map: "fk_Portfolios_Users1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model stocks {
  stock_id         BigInt             @id
  ticker_symbol    String             @unique(map: "ticker_symbol") @db.VarChar(20)
  company_name     String             @db.VarChar(255)
  market_type      String             @db.VarChar(255)
  security_status  String             @db.VarChar(255)
  exchange_id      Int
  transfer_agent   String             @db.VarChar(255)
  currency         String             @db.VarChar(10)
  dividends        dividends[]
  financialreports financialreports[]
  historicalprices historicalprices[]
  exchanges        exchanges          @relation(fields: [exchange_id], references: [exchange_id], onDelete: NoAction, onUpdate: NoAction, map: "stocks_ibfk_1")
  stocksplits      stocksplits[]
  transactions     transactions[]
  watchlistitems   watchlistitems[]

  @@index([exchange_id], map: "exchange_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model stocksplits {
  split_id           BigInt   @id @default(autoincrement())
  stock_id           BigInt
  split_date         DateTime @db.Date
  split_ratio_before Decimal  @db.Decimal(10, 4)
  split_ratio_after  Decimal  @db.Decimal(10, 4)
  stocks             stocks   @relation(fields: [stock_id], references: [stock_id], onDelete: Cascade, map: "fk_StockSplits_Stocks1")

  @@index([stock_id], map: "fk_StockSplits_Stocks1_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model test {
  stock_id Int
  date     DateTime @db.Date
  open     Float    @db.Float
  close    Float    @db.Float

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model transactions {
  transaction_id   BigInt                        @id @default(autoincrement())
  portfolio_id     BigInt
  stock_id         BigInt
  transaction_type transactions_transaction_type
  transaction_date DateTime                      @default(now()) @db.Timestamp(0)
  quantity         Decimal                       @db.Decimal(18, 6)
  price_per_share  Decimal                       @db.Decimal(18, 6)
  commission       Decimal?                      @default(0.00) @db.Decimal(10, 2)
  currency         String                        @db.VarChar(10)
  portfolios       portfolios                    @relation(fields: [portfolio_id], references: [portfolio_id], onDelete: Cascade, map: "fk_Transactions_Portfolios1")
  stocks           stocks                        @relation(fields: [stock_id], references: [stock_id], onDelete: NoAction, map: "fk_Transactions_Stocks1")

  @@index([portfolio_id], map: "fk_Transactions_Portfolios1_idx")
  @@index([stock_id], map: "fk_Transactions_Stocks1_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  google_id      String?           @unique // 用於儲存 Google 的 sub ID，方便關聯和查找
  user_id        BigInt           @id @default(autoincrement())
  username       String           @unique(map: "username_UNIQUE") @db.VarChar(100)
  email          String           @unique(map: "email_UNIQUE") @db.VarChar(255)
  role           String            @default("user")
  password_hash String?   // <<< 在這裡加上問號，使其變為可選
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  last_login     DateTime?        @db.Timestamp(0)
  portfolios     portfolios[]
  watchlistitems watchlistitems[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model watchlistitems {
  user_id  BigInt
  stock_id BigInt
  added_at DateTime @default(now()) @db.Timestamp(0)
  notes    String?  @db.Text
  stocks   stocks   @relation(fields: [stock_id], references: [stock_id], onDelete: Cascade, map: "fk_WatchlistItems_Stocks1")
  users    users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_WatchlistItems_Users1")

  @@id([user_id, stock_id])
  @@index([stock_id], map: "fk_WatchlistItems_Stocks1_idx")
}

enum transactions_transaction_type {
  BUY
  SELL
}
